var _masterlock = false;
var _master = ""; // if set here will not accept ingame command for master
var trigger = "."; // trigger used for commands
var Rev = "ERusher v1.1";

Include("NTRush/funcs/RushCommon.ntl");

function Command() {
	var i,
		_busy = false,
		_set = false,
		_end = false;

	Common.IncludeFuncs();
	Config.Load();
	NTA_Initialize();
	NT_LoadConfig();

	NTTMGR_TownManager();

	SetStatusText(Rev + "Awaiting master");

	RegisterEvent(EVENT_GAMEMSG,
		function (msg, type) {
			var _sender, _command,
				_split = msg.split(":");

			if (type === 0 && msg.indexOf(trigger) !== -1) {
				_sender = _split[0].substring(3, _split[0].length - 3);
				_command = msg.toLowerCase().split(trigger)[1];

				if (_sender === me.name) {
					return;
				}

				switch (_masterlock) {
				case false: // no master atm
					if (_command !== "master") {
						Say("Master has not been set yet");
					} else if (_command === "master") {
						_master = _sender;
						_masterlock = true;
						Say("Master is now set to " + _master);
					}
					break;
				case true:
					if (_busy) {
						return Say("Busy at the moment");
					}
					if (_sender !== _master) {
						return Say("You are not my master " + _sender);
					}
					if (checkCommand(_command)) {
						_busy = true;
						SetStatusText(Rev + " Running " + _command);
						NTTMGR_TownManager();
						switch (_command) {
						case "cain":
							Extras.Cain();
							break;
						case "andy":
							Quests.Andy();
							break;
						case "radament":
							Extras.Radament();
							break;
						case "cube":
							Quests.Cube();
							break;
						case "staff":
							Quests.Staff();
							break;
						case "ammy":
							Quests.Ammy();
							break;
						case "summoner":
							Quests.Summoner();
							break;
						case "duriel":
							Quests.Duriel();
							break;
						case "tome":
							Extras.Tome();
							break;
						case "travincal":
							Quests.Travincal();
							break;
						case "mephisto":
							Quests.Mephisto();
							break;
						case "izual":
							Extras.Izual();
							break;
						case "hephasto":
							Extras.Hephasto();
							break;
						case "diablo":
							Quests.Diablo();
							break;
						case "shenk":
							Extras.Shenk();
							break;
						case "anya":
							Extras.Anya();
							break;
						case "ancients":
							Quests.Ancients();
							break;
						case "baal":
							Quests.Baal();
							break;
						case "waypoints":
							Extras.Waypoints();
							break;
						case "end":
							_end = true;
							break;
						case "list":
							commandList();
							break;
						case "rushone":
							RushAct(1);
							break;
						case "rushtwo":
							RushAct(2);
							break;
						case "rushthree":
							RushAct(3);
							break;
						case "rushfour":
							RushAct(4);
							break;
						case "rushfive":
							RushAct(5);
							break;
						case "rushall":
							for (i = 1; i <= 5; i += 1) {
								RushAct(i);
							}
							break;
						}
						_busy = false;
						SetStatusText(Rev + "Awaiting command");
					}
					break;
				}
			} else if (type === 4 && _masterlock) {
				if (msg.indexOf(_master) !== -1 && (msg.indexOf("weaken") !== -1 || msg.indexOf("timeout") !== -1)) {
					_end = true;
				}
			}
		}
		);

	while (!_end) {
		if (_master !== "" && !_set) {
			_masterlock = true;
			_set = true;
			SetStatusText(Rev + "Awaiting command");
		}
		Delay(500);
	}
	ExitGame();
}

function checkCommand(comm) {
	var i,
		possibles = ["cain", "andy", "radament", "cube", "staff", "ammy", "summoner", "duriel", "tome", "travincal", "mephisto", "izual", "hephasto", "diablo", "shenk", "anya", "ancients", "baal", "waypoints", "end", "list", "rushone", "rushtwo", "rushthree", "rushfour", "rushfive", "rushall"];

	for (i = 0; i < possibles.length; i += 1) {
		if (possibles[i] === comm) {
			return true;
		}
	}
	return false;
}

function RushAct(act) {
	switch (act) {
		case 1:
			Extras.Cain();
			Quests.Andy();
		break;

		case 2:
			Extras.Radament();
			Quests.Cube();
			Quests.Ammy();
			Quests.Staff();
			Quests.Summoner();
			Quests.Duriel();
		break;

		case 3:
			Extras.Tome();
			Quests.Travincal();
			Quests.Mephisto();
		break;

		case 4:
			Extras.Izual();
			Extras.Hephasto();
			Quests.Diablo();
		break;

		case 5:
			Extras.Shenk();
			Extras.Anya();
			Quests.Ancients();
			Quests.Baal();
		break;
	}
}

function commandList() {
	var comms = ["cain, ", "andy, ", "radament, ", "cube, ", "staff, ", // said in first line
		"ammy, ", "summoner, ", "duriel, ", "tome, ", "travincal, ", // said in second line
		"mephisto, ", "izual, ", "hephasto, ", "diablo, ", "shenk, ", // said in third line
		"anya, ", "ancients, ", "baal, ", "waypoints, ", "end, ", "list, ", // said in forth line
		"rushone, ", "rushtwo, ", "rushthree, ", "rushfour, ", "rushfive, ", "rushall"]; // said in last line

	Say("Available commands for the master are the trigger and any of the following ");
	Delay(1000);
	Say(comms[0] + comms[1] + comms[2] + comms[3] + comms[4]);
	Delay(1000);
	Say(comms[5] + comms[6] + comms[7] + comms[8] + comms[9]);
	Delay(1000);
	Say(comms[10] + comms[11] + comms[12] + comms[13] + comms[14]);
	Delay(1000);
	Say(comms[15] + comms[16] + comms[17] + comms[18] + comms[19] + comms[20]);
	Delay(1000);
	Say(comms[21] + comms[22] + comms[23] + comms[24] + comms[25] + comms[26]);
}