var Rev = "1.1.2";
var warncount;
var _AreaName;
var busy = false;
var _Teleport = -1;

function NTMain()
{
	Include("libs/common/NTCommon.ntl");
	Include("NTManual/Manual_Game/AutoTele.ntl");
	
	NTC_IncludeLibs();

	Include("NTManual/Manual_Game/Variables.ntl");
	MG_LoadConfig(me.charname);
	CheckMap();
	AreaPoi();
	ScanPlayers();
	MG_InitializeStats();
	MG_CheckBeltStuff(true);

	if(NTConfig_HostileHandler)
		Load("NTBot/tools/NTHostHandler.ntj");
		
	if(MGConfig_PickItems){
		MG_PickitLoad();
		if (!NTSI_LoadNIPFiles("NTManual/Manual_Game")) {
			MG_LogToOOG(NTC_LOG_COMMON, COLOR_1 + "Error loading NIPFiles");
		}
		
	}

	RegisterEvent(EVENT_KEYDOWN, NT_KeyEvents);
	RegisterEvent(EVENT_GAMEMSG, MG_GameMsgEvent);

	var _count = 0;
	me.maxgametime = 0;
	Delay(Random(100,200));
	while(1) {	
		ChickenStuff(); MG_Resists(); MG_AntiIdle();
		if(_count++ > 500) {
			if(MGConfig_AutoParty) { MG_PartyUp(); }
			if(MGConfig_CheckStuff) { Town_CheckStuff(MG_CS[0], MG_CS[1], MG_CS[2], MG_CS[3]); }
			_count = 0;
		}
		if(MGConfig_PickAuto) { Delay(1000); NTSI_PickItems(); }
		_AreaName =	AreaPoi();
		if(_AreaName.length < 2) { SetStatusText(COLOR_4 + Rev + _AreaName[0]); } //+ " Ping: " + me.ping); }
		else { SetStatusText(COLOR_4 + Rev + _AreaName[0] + COLOR_4 + " or" + _AreaName[1]); } //+ " Ping: " + me.ping); } 
		Delay(100);
	}
}

function MG_PartyUp()
{
	_player = GetPlayerUnit();
	if(_player) {
		_mypartyid = _player.partyid;
		while(_player.GetNext()) {
			if(_player.partyid == 65535 || _player.partyid != _mypartyid) {
				if(_player.partyflag == 2) {
					me.ClickParty(_player, 2);
					break;
				}
				if(_player.partyid == 65535) {
					if(_player.partyflag == 4)
						break;
					me.ClickParty(_player, 2);
					NTC_Delay(NTC_DELAY_FRAME);
					if(_player.partyflag == 4 || (_player.partyid != 65535 && _player.partyid == _mypartyid))
						break;
				}
			}
		}
	} return;
}


function CheckMap()
{
	me.revealautomap = (MGConfig_ShowMap) ? true : false;
	me.showenemyonautomap = (MGConfig_ShowEnemy) ? true : false;
	me.showmissileonautomap = (MGConfig_ShowMissile) ? true : false;
	me.quitonhostile = (MGConfig_RunFromHostile) ? true : false;
}

function NT_KeyEvents(keycode)
{

	switch(keycode) {
		case Key_POI:		
			if(busy)
				return Print(COLOR_1 + "Other Features are running.");
			else {
				if(_Teleport == -1) {
					_Teleport = 0;
					Delay(300);
					if(_Teleport != 0) break;
				}
				else if(_Teleport == 0) {_Teleport = 1; }
				else{ _Teleport = -1; break; }
				busy = true;
				TelePoi();
				_Teleport = -1;
			}
			busy = false;
			break;
		case Key_HiddenStats:
			StackedRes();
			FCRPlusPrint();
			SorbPrint();
			break;
		case Key_Breakpoints:
			T_BPsPrint();
			break;
		case Key_MyChicken:
			ChickenValues();
			break;
		case Key_CharStats:
			NTU_CheckMyStats();
			break;
		case Key_HotKeyInfo:
			Do_KeyHotList();
			Print(COLOR_4 + "Hotkeys sent to manager Common Log!");
			break;
		case Key_ExitGame:
			Print(COLOR_4 + "Calculating stats for game!");
			MG_ComputeStats(false);
			if(NTConfig_ChatRecording) ClosingChatRLogs();
			if(ItemSInfo) ItemSInfo = false;
			ExitGame();
			break;
		case Key_InvStashCheck:
			MG_CheckFreeStashSpace(StashChecking);
			MG_CheckFreeInventorySpace(InvChecking);
			break;
		case Key_DoPrecast:
			NTP_DoPrecast(true);
			break;
		case Key_GoToTown:
			HeadingHome();
			break;
		case Key_GameStats:
			MGConfig_EstRun = false;
			MG_ComputeStats(false);
			Print(COLOR_4 + "Current Game Stats sent to Manager!");
			MGConfig_EstRun = true;
			break;
		case Key_AntiIdle:
			if(MGAntiIdle) {
				MGAntiIdle = false;
				Print(COLOR_4 + "AntiIdle " + COLOR_1 + "OFF");
				if(me.gameserverip) Say("Alright, I'm back!");
			}
			else {
				MGAntiIdle = true;
				Print(COLOR_4 + "AntiIdle " + COLOR_2 + "ON");
				if(me.gameserverip) Say("Going AFK, may be a while!");
			}
			break;
		case Key_PickItems:
			NTSI_PickItems();
			break;
		case Key_NextWaypoint:
			MG_WaypointUp();
			break;
		case Key_CursoriLvL:
			NTU_CursorILvl();
			break;
		case Key_Refresh:
			MG_CheckBeltStuff();
			break;
		case Key_DevTools:
			NTMG_DevelopementTools();
			break;
		case 101:
			break;
		default:
			if(CheckKeyNumber)
				Print(COLOR_2 + WhatHotKey(keycode) + " / " + keycode);
			break;
	}
}

function _classid(i)
{
	switch(i) {
		case 0:	return "Amazon";
		case 1: return "Sorceress";
		case 2: return "Necromancer";
		case 3: return "Paladin";
		case 4: return "Barbarian";
		case 5: return "Druid";
		case 6: return "Assassin";
	}
}

function MG_Resists()
{
	Resi = [(me.GetStat(39) + DiffMod), (me.GetStat(43) + DiffMod), (me.GetStat(41) + DiffMod), (me.GetStat(45) + DiffMod)];
}

var _NTLW_timerLastDrink = new Array(5);

function ChickenStuff()
{
	for(var i = 0 ; i < 5 ; i++)
		_NTLW_timerLastDrink[i] = 0;

	_LifeMax = me.hpmax;
	_ManaMax = me.mpmax;
	if(!InTown()) {
		if(me.hp < parseInt(_LifeMax * MGConfig_LifeChicken,10) / 100) {
			ColorForMang = COLOR_1;
			PrintChicken("HPChicken");
			CloseD2();
		}
		else if(me.mp < parseInt(_ManaMax * MGConfig_ManaChicken,10) / 100) {
			ColorForMang = COLOR_3;
			PrintChicken("MPChicken");
			CloseD2();
		}
		if(parseInt(me.hp*100/_LifeMax) < MGConfig_LifeRejuvThresh) {
			My_DrinkPotion(2); Delay(Random(800,1200));
		}
		if(parseInt(me.hp*100/_LifeMax) < MGConfig_LifeThresh) {
			My_DrinkPotion(0); Delay(Random(800,1200));
		}
		if(parseInt(me.mp*100/_ManaMax) < MGConfig_ManaRejuvThresh) {
			My_DrinkPotion(2); Delay(Random(800,1200));
		}
		if(parseInt(me.mp*100/_ManaMax) < MGConfig_ManaThresh) {
			My_DrinkPotion(1); Delay(Random(800,1200));
		}
	}
	else {
		if(MGConfig_ChickenWarn) {
			ChickenWarning();
		}
	}
}

function My_DrinkPotion(type){
	var _pottype;
	var _result;
	var _tNow = new Date();

	if(type == 2 || type == 4){
		if(_NTLW_timerLastDrink[type] && (_tNow-_NTLW_timerLastDrink[type] < 1000))
			return false;
	}
	else{
		if(_NTLW_timerLastDrink[type] && (_tNow-_NTLW_timerLastDrink[type] < 3000))
			return false;
	}
	if(me.mode == 0 || me.mode == 17)
		return false;
	switch(type){
		case 0:
		case 3: _pottype = "hp"; break;
		case 1: _pottype = "mp"; break;
		default: _pottype = "rv"; break;
	}
	for(var i = 0 ; i < 4 ; i++){
		if(MGConfig_BeltType[i] == _pottype){
			if(type < 3)
				_result = me.UseBelt(i);
			else
				_result = me.UseBelt(i, true);
			if(_result){
				_NTLW_timerLastDrink[type] = new Date();
				return true;
			}
		}
	} return false;
}

function ChickenValues()
{
	HealthThresh = parseInt(me.hpmax * MGConfig_LifeChicken,10) / 100;
	ManaThresh = parseInt(me.mpmax * MGConfig_ManaChicken,10) / 100;
	if(MGConfig_LifeChicken > 0)
		Print(COLOR_8 + "Health chicken at " + COLOR_1 + HealthThresh + " HP");
	else
		Print(COLOR_8 + "Health chicken not activated!");
	if(MGConfig_ManaChicken > 0)
		Print(COLOR_8 + "Mana chicken at " + COLOR_3 + ManaThesh + " MP");
	else
		Print(COLOR_8 + "Mana chicken not activated!");
}

function PrintChicken(type)
{
	var Area = GetArea();
	var MangMsg = "";
	var AreaName = "Candy Mansion";
	var Mob;
	var CloseMobs = new Array();
	CloseMobs = NTU_GetNearbyMonsters(20);
	if (Area) AreaName = Area.name;

	MangMsg += ColorForMang + "Chicken (" + AreaName + ")" + ";";
	MangMsg += COLOR_1 + "-------------" + COLOR_4 + Today + COLOR_1 + " - " + COLOR_4 + TheTime + COLOR_1 + "-------------";

	HealthThresh = parseInt(me.hpmax * MGConfig_LifeChicken,10) / 100;
	ManaThresh = parseInt(me.mpmax * MGConfig_ManaChicken,10) / 100;

	if (type == "HPChicken") {
		MangMsg += COLOR_1 + "\n " + "Health" + COLOR_4 + "(" + COLOR_1 + MGConfig_LifeChicken + COLOR_4 + "%/" + COLOR_1 + HealthThresh + " HP" + COLOR_4 + ")";
		MangMsg += COLOR_3 + "\n Mana: (" + me.mp + ")"
	}
	if (type == "MPChicken") {
		MangMsg += COLOR_3 + "\n " + "Mana " + COLOR_4 + "(" + COLOR_3 + MGConfig_ManaChicken + COLOR_4 + "%/" + COLOR_3 + ManaThresh + " MP" + COLOR_4 + ")";
		MangMsg += COLOR_1 + "\n Life: (" + me.hp + ") "
	}

	if (me.hp <= 0) MangMsg += COLOR_8 + "\n ** Character Death **";
	MangMsg += COLOR_8 + "\n Possible Murderers: ";

	if(CloseMobs.length == 0) { MangMsg+= COLOR_9 + "\n  " + "You didn't heal before leaving town huh?" }
	else if(CloseMobs.length > 0 && CloseMobs.length < 10) {
		for (_index in CloseMobs) {
			Mob = CloseMobs[_index];
			MangMsg += COLOR_9 + "\n  " + Mob;
		}
	}
	else { MangMsg += COLOR_9 + "\n  Too many to list."; }
	MangMsg += COLOR_1 + "\n -------------------------------------------";

	MG_LogToOOG(NTC_LOG_COMMON, MangMsg);
	return;
}

function InTown(MyChar)
{
	return (me.areaid == 1 || me.areaid == 40 || me.areaid == 75 || me.areaid == 103 || me.areaid == 109);
}
var WarnedMeOnce = false;

function ChickenWarning()
{
	if(!WarnedMeOnce){
		if(me.hp < parseInt(me.hpmax * MGConfig_LifeChicken,10) / 100) {
			Print(COLOR_1 + "HP" + COLOR_4 + " Chicken attained (" + COLOR_1 + MGConfig_LifeChicken + COLOR_4 + "). Be sure to heal before leaving town!");
		}
		else if(me.mp < parseInt(me.mpmax * MGConfig_ManaChicken,10) / 100) {
			Print(COLOR_3 + "MP" + COLOR_4 + " Chicken attained (" + COLOR_3 + MGConfig_ManaChicken + COLOR_4 + "). Be sure to heal before leaving town!");
		}
	}
	WarnedMeOnce = true;
}

function addSeparatorsNF(nStr, inD, outD, sep)
{
	nStr += '';
	var dpos = nStr.indexOf(inD);
	var nStrEnd = '';
	if (dpos != -1) {
		nStrEnd = outD + nStr.substring(dpos + 1, nStr.length);
		nStr = nStr.substring(0, dpos);
	}
	var rgx = /(\d+)(\d{3})/;
	while (rgx.test(nStr)) {
		nStr = nStr.replace(rgx, '$1' + sep + '$2');
	}
	return nStr + nStrEnd;
}

var _TotalExp = [0, 0, 500, 1500, 3750, 7875, 14175, 22680, 32886, 44396, 57715, 72144, 90180, 112725, 140906, 176132, 220165, 275207, 344008, 430010, 537513, 671891, 839864, 1049830, 1312287, 1640359, 2050449, 2563061, 3203826, 3902260, 4663553, 5493363, 6397855, 7383752, 8458379, 9629723, 10906488, 12298162, 13815086, 15468534, 17270791, 19235252, 21376515, 23710491, 26254525, 29027522, 32050088, 35344686, 38935798, 42850109, 47116709, 51767302, 56836449, 62361819, 68384473, 74949165, 82104680, 89904191, 98405658, 107672256, 117772849, 128782495, 140783010, 153863570, 168121381, 183662396, 200602101, 219066380, 239192444, 261129853, 285041630, 311105466, 339515048, 370481492, 404234916, 441026148, 481128591, 524840254, 572485967, 624419793, 681027665, 742730244, 809986056, 883294891, 963201521, 1050299747, 1145236814, 1248718217, 1361512946, 1484459201, 1618470619, 1764543065, 1923762030, 2097310703, 2286478756, 2492671933, 2717422497, 2962400612, 3229426756, 3520485254, 0, 0];
var _ExpToNextLvl = [0, 500, 1000, 2250, 4125, 6300, 8505, 10206, 11510, 13319, 14429, 18036, 22545, 28181, 35226, 44033, 55042, 68801, 86002, 107503, 134378, 167973, 209966, 262457, 328072, 410090, 512612, 640765, 698434, 761293, 829810, 904492, 985897, 1074627, 1171344, 1276765, 1391674, 1516924, 1653448, 1802257, 1964461, 2141263, 2333976, 2544034, 2772997, 3022566, 3294598, 3591112, 3914311, 4266600, 4650593, 5069147, 5525370, 6022654, 6564692, 7155515, 7799511, 8501467, 9266598, 10100593, 11009646, 12000515, 13080560, 14257811, 15541015, 16939705, 18464279, 20126064, 21937409, 23911777, 26063836, 28409582, 30966444, 33753424, 36791232, 40102443, 43711663, 47645713, 51933826, 56607872, 61702579, 67255812, 73308835, 79906630, 87098226, 94937067, 103481403, 112794729, 122946255, 134011418, 146072446, 159218965, 173548673, 189168053, 206193177, 224750564, 244978115, 267026144, 291058498, 0, 0];

var _startLvl;
var _startExp;
var _startTime;

function MG_InitializeStats() {
    _startLvl = me.GetStat(12);
    _startExp = me.GetStat(13);
	_startGold = me.GetStat(14) + me.GetStat(15);
    if (_startExp < 0 || _startLvl >= 86) { _startExp = (2147483648 + _startExp); }
    if (_startExp < 2147483648 && _startLvl >= 97) { _startExp = (2147483648 + _startExp); }
    _startTime = GetTickCount();
}

var CountingUp = 0;
function MG_ComputeStats(chickenFlag) {
	var _endGold = (me.GetStat(14) + me.GetStat(15));
	var _endLvl = me.GetStat(12);
    var _lvlsGained = _endLvl - _startLvl;
    var _endExp = me.GetStat(13);
    if (_endExp < 0 || _endLvl >= 86) { _endExp = (2147483648 + _endExp); }
    if (_endExp < 2147483648 && _endLvl >= 97) { _endExp = (2147483648 + _endExp); }

    var _endLvlExp = _TotalExp[_endLvl];
    var _expGained = _endExp - _startExp;
    var _endTime = GetTickCount();
    if (_expGained <= 0) { _expGained = '0'; }

    // Calculate percent of Exp obtained toward next level
    // Remaining Exp / Exp needed to level
    var _progressPercent = parseInt(1000 * (_endExp - _endLvlExp) / _ExpToNextLvl[_endLvl],10) / 10;
	if(_progressPercent >= 0) { var _prop = _progressPercent + "%"; } else { var _prop = "0%"; };

    // Estimate number of runs remaining until next level based on Exp gained
    // Remaining Exp needed to level / Exp Gained
	if(_expGained > 0) {
		var _runsToLevel = (100 - _progressPercent) * _ExpToNextLvl[_endLvl] / (100 * _expGained);
		if(_runsToLevel > 10) {_runsToLevel = parseInt(_runsToLevel,10); } else { _runsToLevel = parseInt(100 * _runsToLevel,10) / 100; };
		LvLProgXP = "";
		if(MGConfig_EstRun){ LvLProgXP += "\n Est. Runs Until Next Level: " + COLOR_2 + addSeparatorsNF(_runsToLevel, ",", ".", ","); }
		LvLProgXP += COLOR_4 + "\n Current Level Progress: " + COLOR_2 + _prop;
		LvLProgXP += COLOR_4 + "\n Experience Gained: " + COLOR_2 + addSeparatorsNF(_expGained, ",", ".", ",");
	}
	else {
		LvLProgXP = "";
	}

	if(_endGold > _startGold){
		_GoldCount = (_endGold - _startGold);
		GoldenInfo = "\n Gold Gained: " + COLOR_2 + _GoldCount;
	}
	else if(_endGold < _startGold){
		_GoldCount = (_startGold - _endGold);
		GoldenInfo = "\n Gold Lost: " + COLOR_1 + _GoldCount;
	}
	else{
		GoldenInfo = "";
	}

    var RunTime = parseInt(((_endTime - _startTime) / 60000),10) + "m " + (parseInt(((_endTime - _startTime) / 1000),10) - parseInt(((_endTime - _startTime) / 60000),10) * 60) + "s";

	if(_lvlsGained > 0) DidGainLvl = "\n Levels Gained : " +  _lvlsGained;
	else if(_lvlsGained < 1) DidGainLvl = "";

	if(me.gameserverip) { CurChar = COLOR_4 + "Game Statistics [" + COLOR_3 + me.gamename + COLOR_4 + "]"; } else { CurChar = me.charname + " " + COLOR_4 + "Game Statistics"; }

	if (!chickenFlag) {
		XPMangMsg = COLOR_8 + CurChar + ";";
		XPMangMsg += COLOR_1 + "--------------------------------------------------";
		XPMangMsg += COLOR_4 + LvLProgXP;
        XPMangMsg += COLOR_4 + "\n Character Level: " + COLOR_2 + _endLvl;
		XPMangMsg += COLOR_1 + DidGainLvl;
		XPMangMsg += COLOR_4 + "\n Elapsed time: " + COLOR_2 + RunTime;
        XPMangMsg += COLOR_4 + "\n Game IP: " + COLOR_2 + Online;
		XPMangMsg += COLOR_4 + GoldenInfo;
		XPMangMsg += COLOR_1 + "\n --------------------------------------------------";
		MG_LogToOOG(NTC_LOG_COMMON, XPMangMsg);
	}
	return;
}

function MG_CheckBeltStuff(startup)
{
	var MGConfig_BeltColType = new Array(16);
	var i;
	var _result;
	var _items;
		_items = me.GetItems();
	for(i = 0; i < _items.length; i++) {
		if(_items[i].mode == 2){
			if(_items[i].classid > 586 && _items[i].classid < 592){ // HP potions
				MGConfig_BeltColType[_items[i].x] = COLOR_1 + "Heal";
				MGConfig_BeltType[_items[i].x] = "hp";
			}
			else if(_items[i].classid > 591 && _items[i].classid < 597){ // MP potions
				MGConfig_BeltColType[_items[i].x] = COLOR_3 + "Mana";
				MGConfig_BeltType[_items[i].x] = "mp";
			}
			else if(_items[i].classid > 514 && _items[i].classid < 517){ // RV potions
				MGConfig_BeltColType[_items[i].x] = COLOR_2 + "Reju";
				MGConfig_BeltType[_items[i].x] = "rv";
			}
			else if(_items[i].classid == 517){ // Thawing
				MGConfig_BeltColType[_items[i].x] = COLOR_9 + "Thaw";
			}
			else if(_items[i].classid == 514){ // Antidote
				MGConfig_BeltColType[_items[i].x] = COLOR_5 + "Anti";
			}
			else if(_items[i].classid == 513){ // Stamina
				MGConfig_BeltColType[_items[i].x] = COLOR_0 + "Stam";
			}
		}
	}
	for(x = 0; x < 16; x++){
		if(MGConfig_BeltColType[x] == undefined)
			MGConfig_BeltColType[x] = COLOR_8 + "None";
	}
	if(!startup){
		MyBeltInfo = COLOR_8 + "Belt Info For " + COLOR_2 + me.charname + ";";
		MyBeltInfo += MGConfig_BeltColType[12] + " " + MGConfig_BeltColType[13] + " " + MGConfig_BeltColType[14] + " " + MGConfig_BeltColType[15] + "\n";
		MyBeltInfo += MGConfig_BeltColType[8] + " " + MGConfig_BeltColType[9] + " " + MGConfig_BeltColType[10] + " " + MGConfig_BeltColType[11] + "\n";
		MyBeltInfo += MGConfig_BeltColType[4] + " " + MGConfig_BeltColType[5] + " " + MGConfig_BeltColType[6] + " " + MGConfig_BeltColType[7] + "\n";
		MyBeltInfo += MGConfig_BeltColType[0] + " " + MGConfig_BeltColType[1] + " " + MGConfig_BeltColType[2] + " " + MGConfig_BeltColType[3] + "\n";
		MG_LogToOOG(NTC_LOG_COMMON, MyBeltInfo);
		//Print(MGConfig_BeltColType[12] + " " + MGConfig_BeltColType[13] + " " + MGConfig_BeltColType[14] + " " + MGConfig_BeltColType[15]);
		//Print(MGConfig_BeltColType[8] + " " + MGConfig_BeltColType[9] + " " + MGConfig_BeltColType[10] + " " + MGConfig_BeltColType[11]);
		//Print(MGConfig_BeltColType[4] + " " + MGConfig_BeltColType[5] + " " + MGConfig_BeltColType[6] + " " + MGConfig_BeltColType[7]);
		//Print(MGConfig_BeltColType[0] + " " + MGConfig_BeltColType[1] + " " + MGConfig_BeltColType[2] + " " + MGConfig_BeltColType[3]);
		Print(COLOR_8 + "Belt slots refreshed!");
	}
	return MGConfig_BeltType;
}

function MG_LogToOOG(type, logString)
{ 
	Delay(100);
	return SendCopyData("D2NT Manager", null, 9<<16|type, logString);
}