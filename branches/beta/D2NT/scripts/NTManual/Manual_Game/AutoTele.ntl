function AreaPoi()// returns POI display info
{
	switch (me.areaid) {
		case 2: return [COLOR_8 + " Den"];
		case 8: return [COLOR_8 + " BloodMoor"];
		case 3: return [COLOR_8 + " 1 Raven", COLOR_8 + " 2 Cave"];
		case 9:	return [COLOR_8 + " Cave Level 2"];
		case 4:	return [COLOR_8 + " Cairn Stones"];
		case 5:	return [COLOR_8 + " Tree Head"];
		case 6: return [COLOR_8 + " 1 Countess", COLOR_8 + " 2 Pit"];
		case 12: return [COLOR_8 + " Pit Level 2"];
		case 27:
		case 28: return [COLOR_8 + " Horadric Malus"];
		case 35:
		case 36:return [COLOR_8 + " Andariel"];
		case 56:
		case 57:
		case 60:return [COLOR_8 + " Cube"];
		case 43:return [COLOR_8 + " Staff"];
		case 47:
		case 48:
		case 49:return [COLOR_8 + " Radament"];
		case 44:
		case 45:
		case 58:
		case 61:return [COLOR_8 + " Amulet"];
		case 74:return [COLOR_8 + " Sumoner"];
		case 46:return [COLOR_8 + " Duriel"];
		case 76:return [COLOR_8 + " Khalims Eye"];
		case 78:return [COLOR_8 + " Khalims Brain"];
		case 80: return [COLOR_8 + " 1 Tome", COLOR_8 + " 2 K's Heart"];
		case 94: return [COLOR_8 + " Tome"];
		case 83: return [COLOR_8 + " Council"];
		case 101: return [COLOR_8 + " Mephisto"];
		case 104:
		case 105:
		case 106: return [COLOR_8 + " Izual"];
		case 107: return [COLOR_8 + " 1 Forge", COLOR_8 + " 2 Chaos"];
		case 111: return [COLOR_8 + " Abaddon"];
		case 112: return [COLOR_8 + " Acheron"];
		case 113:
		case 114: return [COLOR_8 + " Anya"];
		case 117: return [COLOR_8 + " Infernal Pit"];
		case 118: return [COLOR_8 + " Arreat Summit"];
		case 121:
		case 122:
		case 123:
		case 123: return [COLOR_8 + " Halls of Vaught"];
		case 129:
		case 130:
		case 131:return [COLOR_8 + " Throne Room"];
		case 13:
		case 16:
		case 18:
		case 19:
		case 65:
		case 66:
		case 67:
		case 68:
		case 69:
		case 70:
		case 71:
		case 72:
		case 85:
		case 91:
		case 93:
		case 125:
		case 126:
		case 127:
		case 133:
		case 135:return [COLOR_8 + " Golden Chest"];
	}
	var Poi = [" Manual Game"];
	return Poi;
}

function TelePoi()// move to POI's
{
	switch(me.areaid) {
		case 2:	if(!MG_MoveToStairs([2, 8])) return ErrorHandler();
			break;
		case 8:	if(!MG_MoveToStairs([8, 2])) return ErrorHandler();
			break;
		case 3: (_Teleport == 0) ? MG_BurialGround() : MG_Cave();
			break;
		case 9:	if(!MG_MoveToStairs([9, 13])) return ErrorHandler();
			break;
		case 4: if(!NTM_KoMoveToPresetUnit(4, NTC_UNIT_OBJECT, 22))  return ErrorHandler();
			break;
		case 5: if(!NTM_KoMoveToPresetUnit(5, NTC_UNIT_OBJECT, 30))  return ErrorHandler();
			break;
		case 6: (_Teleport == 0) ? MG_Countess() : MG_Pit();
			break;
		case 12:if(!MG_MoveToStairs([12, 16])) return ErrorHandler();
			break;		
		case 27:
		case 28:if(!NTM_KoMoveToPresetUnit(28, NTC_UNIT_OBJECT, 108, 5, 5))  return ErrorHandler();
			break;
		case 35:	
		case 35:if(!MG_MoveToStairs([35, 36],[36, 37])) return ErrorHandler();
			break;
		case 47:if(!MG_MoveToStairs([47, 48])) return ErrorHandler();
		case 48:if(!MG_MoveToStairs([48, 49])) return ErrorHandler();
		case 49:if(!MG_Radament) return ErrorHandler();
			break;
		case 56:
		case 57:
		case 60:if(!MG_MoveToStairs([56, 57],[57, 60])) return ErrorHandler();
			if(!NTM_KoMoveToPresetUnit(60, NTC_UNIT_OBJECT, 354, 4, 2))  return ErrorHandler();
			break;		
		case 43:if(!MG_MoveToStairs([43, 62],[62, 63],[63, 64])) return ErrorHandler();
			if(!NTM_KoMoveToPresetUnit(64, NTC_UNIT_OBJECT, 356, 4, 2))  return ErrorHandler();
			break;
		case 44:if(!MG_MoveToStairs([44, 45, 58], [45, 58], [58, 61])) return ErrorHandler();
		case 61:if(!NTM_KoMoveToPresetUnit(61, NTC_UNIT_OBJECT, 149, 2, -4))  return ErrorHandler();
			break;
		case 74:if(!MG_Sumoner())  return ErrorHandler();
			break;
		case 46:if(!MG_Duriel())  return ErrorHandler();
			break;
		case 76:if(!MG_MoveToStairs([76, 85])) return ErrorHandler();
			break;
		case 78:if(!MG_MoveToStairs([78, 88], [88, 89], [89, 91])) return ErrorHandler();
			break;
		case 80: (_Teleport == 0) ? MG_Tome() : MG_Heart();
			break;
		case 101:if(!MG_MoveToStairs([101, 102])) return ErrorHandler();
			if(!NTM_MoveTo(102, 17592, 8070, 1)) return ErrorHandler();
			break;
		case 104:
		case 105:		
		case 106:if(!MG_Izual())  return ErrorHandler();
			break;
		case 107: (_Teleport == 0) ? MG_Forge() : MG_Chaos();
			break;
		case 111:if(!NTM_KoMoveToPresetUnit(111, NTC_UNIT_OBJECT, 60)) return ErrorHandler();
			if(!NTM_TakeUnit(NTC_UNIT_OBJECT, 60)) return ErrorHandler();
			break;
		case 112:if(!NTM_KoMoveToPresetUnit(112, NTC_UNIT_OBJECT, 60)) return ErrorHandler();
			if(!NTM_TakeUnit(NTC_UNIT_OBJECT, 60)) return ErrorHandler();
			break;
		case 113:if(!MG_MoveToStairs([113, 114])) return ErrorHandler();
		case 114: if(!NTM_KoMoveToPresetUnit(114, NTC_UNIT_OBJECT, 460, 3, 3)) return ErrorHandler();
			break;
		case 117:if(!NTM_KoMoveToPresetUnit(117, NTC_UNIT_OBJECT, 60)) return ErrorHandler();
			if(!NTM_TakeUnit(NTC_UNIT_OBJECT, 60)) return ErrorHandler();
			break;
		case 118:if(!MG_MoveToStairs([118, 120])) return ErrorHandler();
			break;
		case 121:
		case 122:
		case 123:if(!MG_MoveToStairs([121,122], [122,123], [123,124])) return ErrorHandler();
			break;
		case 129:
		case 130:if(!MG_MoveToStairs([129, 130], [130, 131])) return ErrorHandler();
		case 131:if(!NTM_MoveTo(131, 15112, 5068, 1)) return ErrorHandler();
			break;
		case 13:
		case 16:
		case 18:
		case 19:
		case 65:
		case 66:
		case 67:
		case 68:
		case 69:
		case 70:
		case 71:
		case 72:
		case 85:
		case 91:
		case 93:
		case 125:
		case 126:
		case 127:
		case 133:
		case 135: MG_GoldenChest();
			break;
	}
}

function MG_GoldenChest()
{
	SetStatusText(COLOR_4 + Rev + COLOR_8 + " Golden Chest");
	var chest;
	switch (me.areaid) {
		case 85: chest = 407; break;
		case 91: chest = 406; break;
		case 93: chest = 405; break;
		default: chest = 397;
	}
	
	if(!NTM_MoveToPresetUnit(me.areaid, NTC_UNIT_OBJECT, chest)) return ErrorHandler();
	return;
}

function MG_Cave()
{
	SetStatusText(COLOR_4 + Rev + COLOR_8 + " Cave");
	if(!MG_MoveToStairs([3, 9])) return ErrorHandler();
	return;
}

function MG_BurialGround()
{
	SetStatusText(COLOR_4 + Rev + COLOR_8 + " BurialGround");
	if(!NTM_KoMoveToStair(17, 19, 0, 20)) return ErrorHandler();
	return;
}

function MG_Countess()
{
	SetStatusText(COLOR_4 + Rev + COLOR_8 + " Countess");
	if(!MG_MoveToStairs([6, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25])) return ErrorHandler();
	return;
}

function MG_Pit()
{
	SetStatusText(COLOR_4 + Rev + COLOR_8 + " Pit");
	if(!NTM_KoMoveToPresetUnit(7, NTC_UNIT_OBJECT, 37)) return ErrorHandler();
	if(!MG_MoveToStairs([7, 12])) return ErrorHandler();
	return;
}

function MG_Radament()
{
	SetStatusText(COLOR_4 + Rev + COLOR_8 + " Radament");
	if(!NTM_KoMoveToPresetUnit(me.areaid, NTC_UNIT_OBJECT, 355, 1, -1)) return ErrorHandler();
	return;
}
function MG_Sumoner()
{
	SetStatusText(COLOR_4 + Rev + COLOR_8 + " Sumoner");
	var _unit, _journalx, _journaly ;
	NTP_DoPrecast(true);
		
	_unit = GetPresetUnits(me.areaid, 2);
		
	for (i=0;i < _unit.length; i++) {
		if (_unit[i].id == 357) {
			_journalx = _unit[i].roomx*5+_unit[i].x;
			_journaly = _unit[i].roomy*5+_unit[i].y;
		}
	}

	if(_journalx < 25300){_journalx+=55;}
	if(_journaly < 5300){_journalx+=15; _journaly+=55;}
	if(_journalx > 25500){_journalx-=40; _journaly+=15;}
	if(_journaly > 5500){_journalx+=15; _journaly-=40;}
	if(!NTM_MoveTo(me.areaid, _journalx, _journaly)) return false;
	
	return true;
}

function MG_Duriel()
{
	SetStatusText(COLOR_4 + Rev + COLOR_8 + " Duriel");
	var _tile;
	var _tombs = GetRoom();
	
	if(_tombs) {
		if(NTM_KoMoveToPresetUnit(me.areaid, NTC_UNIT_TILE, _tombs.correcttomb - 28)) {
			_tile = NTC_FindUnit(NTC_UNIT_TILE, _tombs.correcttomb - 28, 5);
			if(_tile) {
				if(NTM_TakeStair(_tile.subareaid)) {
					if(NTM_KoMoveToPresetUnit(me.areaid, NTC_UNIT_OBJECT, 152, -6, 0))
						return true;
				}
			}
		}
	}
	return false;
}

function MG_Tome()
{
	SetStatusText(COLOR_4 + Rev + COLOR_8 + " Tome");
	if(!MG_MoveToStairs([80, 94])) return ErrorHandler();
	return;
}

function MG_Heart()
{
	SetStatusText(COLOR_4 + Rev + COLOR_8 + " Khalims Heart");
	if(!MG_MoveToStairs([80, 92], [92, 93])) return ErrorHandler();
	return;
}

function MG_Izual()
{
	SetStatusText(COLOR_4 + Rev + COLOR_8 + " Izual");
	var _monst = GetPresetUnits(105, NTC_UNIT_MONSTER, "izual");
	if(!_monst)
		return Print("No Monster found") && false;
	var posx = _monst[0].roomx*5+_monst[0].x;
	var posy = _monst[0].roomy*5+_monst[0].y;
	var _pathb = GetPath(105, posx, posy, me.x, me.y, true);
	if(!_pathb)
		return Print("No Path found") && false;
			
	for(i = _pathb.length-1 ; i > -1 ; i--) {
		var dis = GetDistance(_pathb[i][0], _pathb[i][1], posx, posy)
		if(dis < 65)
			break;
	}

	NTP_DoPrecast();
	if(!NTM_MoveTo(me.areaid, _pathb[i][0], _pathb[i][1])) return false;
	return true;
}

function MG_Forge()
{
	SetStatusText(COLOR_4 + Rev + COLOR_8 + " Forge");
	if(!NTM_KoMoveToPresetUnit(107, NTC_UNIT_OBJECT, 376, 2, -4)){
		return ErrorHandler();
	}
}

function MG_Chaos()
{
	SetStatusText(COLOR_4 + Rev + COLOR_8 + " Chaos");
	if(!NTM_MoveTo(108, 7794, 5557)){
		return ErrorHandler();
	}
}

function MG_WaypointUp()
{
	if(me.areaid != 1 && me.areaid != 40 && me.areaid != 75 && me.areaid != 103 && me.areaid != 109)
		NTP_DoPrecast(true);
	switch (me.areaid) {
		case 1:	if(!NTTM_TownMove("exit")) return ErrorHandler();
			NTTM_OutOfAct1();
			NTP_DoPrecast(true);
		case 17:
		case 2:	if(!NTM_MoveToPresetUnit(3, NTC_UNIT_OBJECT, 119)) return ErrorHandler();
			break;
		case 3:	if(!NTM_MoveToPresetUnit(4, NTC_UNIT_OBJECT, 119)) return ErrorHandler();
			break;
		case 4: if(!MG_MoveToStairs([4, 10])) return ErrorHandler();
		case 10: if(!MG_MoveToStairs([10, 5])) return ErrorHandler();
			if(!NTM_KoMoveToPresetUnit(5, NTC_UNIT_OBJECT, 119)) return ErrorHandler();
			break;
		case 5: if(!NTM_KoMoveToPresetUnit(6, NTC_UNIT_OBJECT, 119)) return ErrorHandler();
			break;
		case 6:	if(!NTM_KoMoveToPresetUnit(7, NTC_UNIT_OBJECT, 37)) return ErrorHandler();
			if(!NTM_KoMoveToPresetUnit(26, NTC_UNIT_OBJECT, 27)) return ErrorHandler();
			if(!NTM_KoMoveToPresetUnit(27, NTC_UNIT_OBJECT, 119)) return ErrorHandler();
			break;
		case 27:if(!MG_MoveToStairs([27, 28, 29])) return ErrorHandler();
		case 28:if(!MG_MoveToStairs([28, 29])) return ErrorHandler();
			if(!NTM_KoMoveToPresetUnit(29, NTC_UNIT_OBJECT, 157)) return ErrorHandler();
			break;
		case 29:if(!MG_MoveToStairs([29, 30])) return ErrorHandler();
		case 30:if(!MG_MoveToStairs([30, 31])) return ErrorHandler();
		case 31:if(!MG_MoveToStairs([31, 32])) return ErrorHandler();
			if(!NTM_KoMoveToPresetUnit(32, NTC_UNIT_OBJECT, 119)) return ErrorHandler();
			break;
		case 32:if(!MG_MoveToStairs([32, 33, 34])) return ErrorHandler();
		case 33:if(!MG_MoveToStairs([33, 34])) return ErrorHandler();
		case 34:if(!MG_MoveToStairs([34, 35])) return ErrorHandler();
			if(!NTM_KoMoveToPresetUnit(35, NTC_UNIT_OBJECT, 157)) return ErrorHandler();
			break;
		case 35:NTM_TakeWaypoint(40);
		case 40:if(!NTTM_TownMove("greiz")) return ErrorHandler();
			if(!NTM_TakeStair(47)) return ErrorHandler();
			if(!MG_MoveToStairs([40, 47])) return ErrorHandler();
		case 47:if(!MG_MoveToStairs([47, 48])) return ErrorHandler();
			if(!NTM_KoMoveToPresetUnit(48, NTC_UNIT_OBJECT, 323)) return ErrorHandler();
			break;
		case 48:NTM_TakeWaypoint(40);
			_unit = GetPresetUnits(41, NTC_UNIT_OBJECT);
			if(!_unit)return ErrorHandler();
			if(_unit[0].id == 286) {
				if(!NTTM_TownMove("drognan")) return ErrorHandler();
				if(!NTM_MoveTo(41, me.x, me.y - 60)) return ErrorHandler();
			}
			else {
				if(!NTTM_TownMove("exit")) return ErrorHandler();
				if(!NTM_MoveTo(41, me.x - 40, me.y)) return ErrorHandler();
			}
		case 41: if(!NTM_KoMoveToPresetUnit(42, NTC_UNIT_OBJECT, 156)) return ErrorHandler();
			break;
		case 42:if(!MG_MoveToStairs([42, 56])) return ErrorHandler();
		case 56:if(!MG_MoveToStairs([56, 57])) return ErrorHandler();
			if(!NTM_KoMoveToPresetUnit(57, NTC_UNIT_OBJECT, 156)) return ErrorHandler();
			break;
		case 57:NTM_TakeWaypoint(42);
			if(!NTM_KoMoveToPresetUnit(43, NTC_UNIT_OBJECT, 156)) return ErrorHandler();
			break;
		case 43:if(!NTM_KoMoveToPresetUnit(44, NTC_UNIT_OBJECT, 156)) return ErrorHandler();
			break;
		case 44:NTM_TakeWaypoint(40);
			if(!NTTM_TownMove("palace")) return ErrorHandler();
			if(!NTM_TakeStair(50)) return ErrorHandler();
		case 50:if(!MG_MoveToStairs([50, 51])) return ErrorHandler();
		case 51:if(!MG_MoveToStairs([51, 52])) return ErrorHandler();
			if(!NTM_KoMoveToPresetUnit(52, NTC_UNIT_OBJECT, 288)) return ErrorHandler();
			break;
		case 52:if(!MG_MoveToStairs([52, 53])) return ErrorHandler();
		case 53:if(!MG_MoveToStairs([53, 54])) return ErrorHandler();
		case 54:if(!NTM_KoMoveToPresetUnit(54, NTC_UNIT_OBJECT, 298)) return ErrorHandler();
			if(!NTM_TakeUnit(NTC_UNIT_OBJECT, 298)) return ErrorHandler();
			if(!NTM_KoMoveToPresetUnit(74, NTC_UNIT_OBJECT, 402)) return ErrorHandler();
			break;
		case 74:if(!NTM_KoMoveToPresetUnit(74, NTC_UNIT_OBJECT, 357))return ErrorHandler();		
			var _journal = NTC_FindUnit(NTC_UNIT_OBJECT, 357);
			if(!NTC_DoClick(NTC_CLICK_LDOWN, NTC_SHIFT_NONE, _journal))	return ErrorHandler();		
			NTM_MoveTo(me.areaid, me.x+8, me.y-6);				
			me.Cancel(0);NTC_Delay(100);me.Cancel(0);NTC_Delay(100);
			NTM_UsePortal("Portal", 46);
			NTM_MoveTo(me.areaid, me.x-16, me.y-16);
			break;
		case 46:NTM_TakeWaypoint(75);
		case 75:
			if(!NTTM_TownMove("exit")) return ErrorHandler();
			if(!NTM_MoveTo(76, me.x, me.y - 70, 5)) return ErrorHandler();
			NTP_DoPrecast(true);
			if(!NTM_KoMoveToPresetUnit(76, NTC_UNIT_OBJECT, 237)) return ErrorHandler();
			break;
		case 76:if(!NTM_KoMoveToPresetUnit(77, NTC_UNIT_OBJECT, 237)) return ErrorHandler(); break;
		case 77:if(NTM_KoMoveToPresetUnit(78, NTC_UNIT_OBJECT, 237)) break;
			else {
				if(!NTM_TakeWaypoint(76)) return ErrorHandler();
				if(!NTM_KoMoveToPresetUnit(78, NTC_UNIT_OBJECT, 237)) return ErrorHandler();
			}
			break;
		case 78:if(!NTM_KoMoveToPresetUnit(79, NTC_UNIT_OBJECT, 237)) return ErrorHandler();
			break;
		case 79:if(!NTM_KoMoveToPresetUnit(80, NTC_UNIT_OBJECT, 237)) return ErrorHandler();
			break;
		case 80:if(!NTM_KoMoveToPresetUnit(81, NTC_UNIT_OBJECT, 237)) return ErrorHandler();
			break;
		case 81:if(!NTM_KoMoveToPresetUnit(82, NTC_UNIT_OBJECT, 194, 50, 0)) return ErrorHandler();
		case 82:if(!NTM_KoMoveToPresetUnit(83, NTC_UNIT_OBJECT, 237)) return ErrorHandler();
			break;
		case 83:if(me.GetQuest(18, 0) == 0){Print("Cannot continue need Orb Quest");return;}
			if(!MG_MoveToStairs([83, 100])) return ErrorHandler();
		case 100:if(!MG_MoveToStairs([100, 101])) return ErrorHandler();
			if(!NTM_KoMoveToPresetUnit(101, NTC_UNIT_OBJECT, 324)) return ErrorHandler();
			break;
		case 101:	NTM_TakeWaypoint(103);
		case 103: 
			if(!NTTM_TownMove("exit")) return ErrorHandler();
			if(!NTM_MoveTo(104, me.x + 20, me.y)) return ErrorHandler();
			NTP_DoPrecast(true);
			if(!NTM_KoMoveToPresetUnit(105, NTC_UNIT_OBJECT, 374)) return ErrorHandler();
			if(!NTM_KoMoveToPresetUnit(106, NTC_UNIT_OBJECT, 238)) return ErrorHandler();
			break;
		case 106:	if(!MG_MoveToStairs([106, 107])) return ErrorHandler();
			if(!NTM_KoMoveToPresetUnit(107, NTC_UNIT_OBJECT, 238)) return ErrorHandler();
			break;
		case 107:	NTM_TakeWaypoint(109);
		case 109:	var _unit;
			if(!NTTM_TownMove("exit"))return ErrorHandler();
			_unit = NTC_FindUnit(NTC_UNIT_OBJECT, 449, 5);
			if(!_unit)return ErrorHandler();
			if(!_unit.mode) {
				if(!NTC_OpenChest(_unit))
					return ErrorHandler();
			}
			if(!NTM_MoveTo(110, me.x - 50, me.y)) return ErrorHandler();
			NTP_DoPrecast(true);
		case 110:	if(!NTM_KoMoveToPresetUnit(111, NTC_UNIT_OBJECT, 496)) return ErrorHandler();
			break;
		case 111:	if(!NTM_KoMoveToPresetUnit(112, NTC_UNIT_OBJECT, 496)) return ErrorHandler();
			break;
		case 112:	if(!MG_MoveToStairs([112, 113])) return ErrorHandler();
			if(!NTM_KoMoveToPresetUnit(113, NTC_UNIT_OBJECT, 511)) return ErrorHandler();
			break;
		case 113:	if(!MG_MoveToStairs([113, 115])) return ErrorHandler();
			if(!NTM_KoMoveToPresetUnit(115, NTC_UNIT_OBJECT, 511)) return ErrorHandler();
			break;
		case 115:	if(!MG_MoveToStairs([115, 117])) return ErrorHandler();
			if(!NTM_KoMoveToPresetUnit(117, NTC_UNIT_OBJECT, 496)) return ErrorHandler();
			break;
		case 117:	if(!MG_MoveToStairs([117, 118])) return ErrorHandler();
			if(!NTM_KoMoveToPresetUnit(118, NTC_UNIT_OBJECT, 511)) return ErrorHandler();
			break;
		case 121:	if(!MG_MoveToStairs([121, 122])) return ErrorHandler();
		case 122:	if(!MG_MoveToStairs([122, 123])) return ErrorHandler();
			if(!NTM_KoMoveToPresetUnit(123, NTC_UNIT_OBJECT, 496)) return ErrorHandler();
			Print(COLOR_2 + "Get this waypoint only if you want the portal to close!");
			break;
		case 118:	if(!MG_MoveToStairs([118, 120])) return ErrorHandler();
		case 120:	if(!MG_MoveToStairs([120, 128])) return ErrorHandler();
		case 128:	if(!MG_MoveToStairs([128, 129])) return ErrorHandler();
			if(!NTM_KoMoveToPresetUnit(129, NTC_UNIT_OBJECT, 494)) return ErrorHandler();
			break;
		default: Print(COLOR_4 + "No waypoint from here, heading home!"); HeadingHome(); break;
	} return MG_ClickWaypoint();
}

function ErrorHandler()
{
	Print(COLOR_1 + "Error moving in area " + me.areaid);
	return;
}

function MG_ClickWaypoint()
{
	var _waypoint = NTC_FindUnit(NTC_UNIT_OBJECT, GetLocaleString(22526), 5);

	if(_waypoint && (me.areaid != 123)) {
		for (var i = 0; i < 55; i++) {
			if((i % 10) == 0)
				NTC_DoClick(NTC_CLICK_LDOWN, NTC_SHIFT_NONE, _waypoint);
				Delay(100);
			if(_waypoint.mode) {
				if(GetUIState(0x14))
					me.Cancel(1);
				return true;
			}
		}
	} return false;
}

function MG_MoveToStairs()
{
	NTP_DoPrecast();// ? precast if needed
	for (var i = 0; i < arguments.length; i++) {
		if(arguments[i][0] == me.areaid) {
			if(arguments[i].length < 3) {
				if(!NTM_KoMoveToStair(arguments[i][0], arguments[i][1]))
					return false;
				if(!NTM_TakeStair(arguments[i][1]))
					return false;
			}
			else {	
				if(!NTM_KoMoveToStair(arguments[i][1], arguments[i][2]))
					return false;
				if(!NTM_TakeStair(arguments[i][2]))
					return false;
			}
		}
	} return true;
}